{% extends "base.html.jinja" %}

{% block title %}Proof Assistant - LM Theory{% endblock %}

{% block head %}
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script>
    window.MathJax = {
        loader: {load: ['[tex]/mathtools']},
        tex: {
            tags: 'all',  // Automatically number all display equations
            packages: {'[+]': ['mathtools']},
            autoload: {
                coloneqq: ['mathtools']
            },
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            macros: {
                {{mathjax_macros | code_list | safe}}
            },
            environments: {
                {{mathjax_environments | code_list | safe}}
            },
        },
        options: {
            renderActions: {
                addMenu: []
            },
            ignoreHtmlClass: "tex2jax_ignore",
            skipHtmlTags: ["script", "noscript", "style", "textarea", "pre", "code"]
        }
    };
</script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.12/marked.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.7/purify.min.js"></script>
    
{% endblock %}

{% block content %}
<h2>Proof Assistant</h2>

At this page, you can get assistance for constructing informal proofs and building new theorems.
<br>
<br>
The assistant has access to all statments in the statement database. Refer to them with the corresponding numbers (e.g. Theorem 1, Definition 11, etc.)

<h2>Chat</h2>

<div id="chat-container">
    <div id="messages"></div>
    <div id="input-container">
        <input id="message-input" type="text" placeholder="Type a message..." />
        <button id="send-button">Send</button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const messagesContainer = document.getElementById('messages');

    // Handle sending messages
    document.getElementById('send-button').addEventListener('click', async () => {
        const inputElement = document.getElementById('message-input');
        const message = inputElement.value;
        inputElement.value = '';

        if (message.trim() === '') return;

        // Sanitize and parse user message
        const sanitizedUserMessage = DOMPurify.sanitize(`You: ${message}`);

        // Display user message
        const userMessageDiv = document.createElement('div');
        userMessageDiv.innerHTML = sanitizedUserMessage;
        messagesContainer.appendChild(userMessageDiv);

        // Send message to server
        try {
            const response = await fetch('/proof_assistant/query', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt: message })
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();

            // Sanitize and display bot reply
            const sanitizedBotReply = DOMPurify.sanitize(data.reply);

            const botMessageDiv = document.createElement('div');
            botMessageDiv.innerHTML = `Bot: ${sanitizedBotReply}`;
            messagesContainer.appendChild(botMessageDiv);

            // Re-render MathJax for new messages
            MathJax.typesetPromise();

        } catch (error) {
            console.error('Error:', error);
        }

        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });
});
</script>

{% endblock %}