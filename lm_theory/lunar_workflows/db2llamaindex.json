{
    "id": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
    "userId": "si5126lj-s@student.lu.se",
    "name": "Statement Indexing",
    "description": "Create a LlamaIndex index of the statements in a paper database.",
    "version": null,
    "components": [
      {
        "id": "ba77b735-8902-4c04-beff-eafb6b86be57",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Text Input",
        "className": "TextInput",
        "description": "Allows the user to input a text (potentially with template variables) that can be used in other downstream components.\nInputs:\n  `Input` (str): The text to output.\nOutput (str): The inputted text.",
        "group": "Input",
        "inputs": [
          {
            "key": "Input",
            "dataType": "TEMPLATE",
            "value": "",
            "templateVariables": {},
            "componentId": "ba77b735-8902-4c04-beff-eafb6b86be57"
          }
        ],
        "output": {
          "dataType": "TEXT",
          "value": ":undef:"
        },
        "label": "TEXTINPUT-0",
        "configuration": {
          "force_run": false
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 208.6724679286549,
          "y": 338.8197639805422
        },
        "timeout": 600,
        "componentCode": "text_input/text_input/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "text_input/text_input/example.json",
        "invalidErrors": []
      },
      {
        "id": "a0ec84c5-c137-4edd-849e-229512a8ddc4",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Python coder",
        "className": "PythonCoder",
        "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
        "group": "Coders",
        "inputs": [
          {
            "key": "Code",
            "dataType": "CODE",
            "value": "db_path = '{db_path}'\nwith open(db_path, 'r') as db_file:\n  db_json_str = db_file.read()\nresult = db_json_str",
            "templateVariables": {
              "Code.db_path": ":undef:"
            },
            "componentId": "a0ec84c5-c137-4edd-849e-229512a8ddc4"
          }
        ],
        "output": {
          "dataType": "ANY",
          "value": ":undef:"
        },
        "label": "PYTHONCODER-1",
        "configuration": {
          "force_run": false,
          "openai_api_key": "",
          "openai_api_base": ""
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 619.2599089497689,
          "y": 341.1988992933005
        },
        "timeout": 600,
        "componentCode": "python_coder/python_coder/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "python_coder/python_coder/example.json",
        "invalidErrors": []
      },
      {
        "id": "a0ec84c5-c137-4edd-849e-229512a8ddc4",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Python coder",
        "className": "PythonCoder",
        "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
        "group": "Coders",
        "inputs": [
          {
            "key": "Code",
            "dataType": "CODE",
            "value": "result = {}",
            "templateVariables": {},
            "componentId": "a0ec84c5-c137-4edd-849e-229512a8ddc4"
          }
        ],
        "output": {
          "dataType": "ANY",
          "value": ":undef:"
        },
        "label": "PYTHONCODER-2",
        "configuration": {
          "force_run": false,
          "openai_api_key": "",
          "openai_api_base": ""
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 622.4730849367971,
          "y": 53.61964845428234
        },
        "timeout": 600,
        "componentCode": "python_coder/python_coder/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "python_coder/python_coder/example.json",
        "invalidErrors": []
      },
      {
        "id": "0d289645-25f2-49c4-9a6a-be9d535fda3b",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Paper Database Builder",
        "className": "PaperDatabaseBuilder",
        "description": "Builds a JSON with data of scientific papers.\nInput:\n  `papers` (Dict[str, Dict]): A dict where each key is a string of the Arxiv ID, and the value is a dict with the following string keys:\n    `title` (str): The title of the paper,\n    `authors` (List[str]): A list of the authors,\n    `tex` (str): The latex code,\n    `bibtex` (str): The bibtex of the paper,\n    `paper_url` (str): An URL to the paper\n  `loaded_database_json` (str): JSON str of an existing database to extend (set empty if there is no yet)\n  `save_path` (str): A path to a JSON file where the database will be saved (set empty to not save)\n  `pages_root` (str): The path to the root directory of generated HTML pages (set empty if no HTML pages are to be generated)\nOutput (Dict(str, Any)): A dict with data extracted \n",
        "group": "Miscellaneous",
        "inputs": [
          {
            "key": "papers",
            "dataType": "JSON",
            "value": ":undef:",
            "templateVariables": {},
            "componentId": "0d289645-25f2-49c4-9a6a-be9d535fda3b"
          },
          {
            "key": "loaded_database_json",
            "dataType": "TEXT",
            "value": ":undef:",
            "templateVariables": {},
            "componentId": "0d289645-25f2-49c4-9a6a-be9d535fda3b"
          },
          {
            "key": "save_path",
            "dataType": "TEXT",
            "value": "",
            "templateVariables": {},
            "componentId": "0d289645-25f2-49c4-9a6a-be9d535fda3b"
          },
          {
            "key": "pages_root",
            "dataType": "TEXT",
            "value": "",
            "templateVariables": {},
            "componentId": "0d289645-25f2-49c4-9a6a-be9d535fda3b"
          }
        ],
        "output": {
          "dataType": "JSON",
          "value": ":undef:"
        },
        "label": "PAPERDATABASEBUILDER-3",
        "configuration": {
          "force_run": "false",
          "extend_db": "0",
          "overwrite_existing_db": "0"
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 1093.2033670364192,
          "y": 199.8191558640625
        },
        "timeout": 600,
        "componentCode": "paper_database_builder/paper_database_builder/__init__.py",
        "componentCodeRequirements": [
          "git+https://github.com/SL2000s/lm_theory.git"
        ],
        "componentExamplePath": "paper_database_builder/paper_database_builder/example.json",
        "invalidErrors": []
      },
      {
        "id": "a0ec84c5-c137-4edd-849e-229512a8ddc4",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Python coder",
        "className": "PythonCoder",
        "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
        "group": "Coders",
        "inputs": [
          {
            "key": "Code",
            "dataType": "CODE",
            "value": "db_dict = {db_dict}\n\nllama_index_dict = {}\nfor paper_dict in db_dict['papers']:\n  source = paper_dict['source_url']\n  for type_statements in paper_dict['statements'].values():\n    for statement_dict in type_statements:\n      lib_name = statement_dict['library_name']\n      statement_tex = statement_dict['statement_original_tex']\n      statement_id = statement_dict['statement_id']\n      llama_index_dict[lib_name] = {\n        'library_name': lib_name,\n        'statement': statement_tex,\n        'id': statement_id,\n        'source': source\n      }\n\nresult = llama_index_dict",
            "templateVariables": {
              "Code.db_dict": ""
            },
            "componentId": "a0ec84c5-c137-4edd-849e-229512a8ddc4"
          }
        ],
        "output": {
          "dataType": "ANY",
          "value": ":undef:"
        },
        "label": "PYTHONCODER-4",
        "configuration": {
          "force_run": false,
          "openai_api_key": "",
          "openai_api_base": ""
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 1512.522833343591,
          "y": 199.8191558640625
        },
        "timeout": 600,
        "componentCode": "python_coder/python_coder/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "python_coder/python_coder/example.json",
        "invalidErrors": []
      },
      {
        "id": "7bcb39c7-3dd6-44ac-896b-cf60045658a9",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "LlamaIndex Indexing",
        "className": "LlamaIndexIndexing",
        "description": "Index documents from a json dict with Azure OpenAI models within LlamaIndex.\nConfiguration:\n  `keys_list` (list[str]): A list of keys mapped to document content in each document dict (e.g. [`text`, `statement`])\n  `index_name` (str): A string with one of the four values `summary`, `vector`, `keyword`, or `tree`\n  `index_persist_dir` (str): The name for the storage index (e.g. `IsarMathLib-Summary`)\n  `openai_api_key` (str),\n  `azure_endpoint` (str): e.g. `https://lunarchatgpt.openai.azure.com/`,\n  `api_version` (str): e.g. `2024-02-01`,\n  `llm_model_name` (str): e.g. `gpt-4o`,\n  `llm_deployment_name` (str): e.g. `lunar-chatgpt-4o`,\n  `emb_model_name`: e.g. `text-embedding-ada-002`,\n  `emb_deployment_name`: e.g. `lunar-embeddings`\nInputs:\n  `Documents Json`: A dictionary containg where each key is a document name mapped to a dictionary with the keys `id`, `source`, and the keys in `key_list_json`. E.g. {`document1`: {`text`: `This is a text about Switzerland. Switzerland is a country in Europe. Its capital is Bern.`, `statement`: `Bern is the capital of Switzerland.`, `id`: `abc123`, `source`: `wikipedia`}}\nOutput (dict): A dictionary containing the keys:\n  `original_json` (dict): copy of the input,\n  `index_dir` (str): directory where the index is stored,\n  `index_name` (str): name of the stored index,\n  `keys_list` (list[str]): list of the stored index keys,\n  `llm_config` (dict): configuration of the LLM,\n  `embed_model_config` (dict): configuration of the embedding model",
        "group": "Miscellaneous",
        "inputs": [
          {
            "key": "Documents Json",
            "dataType": "JSON",
            "value": ":undef:",
            "templateVariables": {},
            "componentId": "7bcb39c7-3dd6-44ac-896b-cf60045658a9"
          }
        ],
        "output": {
          "dataType": "JSON",
          "value": ":undef:"
        },
        "label": "LLAMAINDEXINDEXING-5",
        "configuration": {
          "force_run": "true",
          "keys_list": "library_name, statement",
          "index_name": "summary",
          "index_persist_dir": "LM-Theory-Summary",
          "openai_api_key": "",
          "azure_endpoint": "",
          "api_version": "2024-02-01",
          "llm_model_name": "gpt-4o",
          "llm_deployment_name": "lunar-chatgpt-4o",
          "emb_model_name": "text-embedding-ada-002",
          "emb_deployment_name": "lunar-embeddings"
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 1934.6657988400211,
          "y": 203.55750372785795
        },
        "timeout": 600,
        "componentCode": "llamaindex_index/llamaindex_index/__init__.py",
        "componentCodeRequirements": [
          "llama-index-llms-azure-openai",
          "llama_index",
          "llama-index-embeddings-azure-openai"
        ],
        "componentExamplePath": "llamaindex_index/llamaindex_index/example.json",
        "invalidErrors": []
      },
      {
        "id": "a0ec84c5-c137-4edd-849e-229512a8ddc4",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Python coder",
        "className": "PythonCoder",
        "description": "Performs customized Python code execution. Outputs the value that the Python variable `result` is set to during the execution of the Python code.\nInputs:\n  `Code` (str): A string of the Python code to execute.  If needed, the Python code can be inputted manually by the user.\nOutput (Any): The value of the variable `result` in the Python code after execution.",
        "group": "Coders",
        "inputs": [
          {
            "key": "Code",
            "dataType": "CODE",
            "value": "import json\n\nindex_data = {index_data}\nindex_json_path = '{index_json_path}'\n\nif index_json_path:\n  with open(index_json_path, 'w') as json_file:\n      json.dump(index_data, json_file, indent=4)\n\nresult = index_json_path",
            "templateVariables": {
              "Code.index_data": ":undef:",
              "Code.index_json_path": ":undef:"
            },
            "componentId": "a0ec84c5-c137-4edd-849e-229512a8ddc4"
          }
        ],
        "output": {
          "dataType": "ANY",
          "value": ":undef:"
        },
        "label": "PYTHONCODER-6",
        "configuration": {
          "force_run": false,
          "openai_api_key": "",
          "openai_api_base": ""
        },
        "version": null,
        "isCustom": false,
        "isTerminal": true,
        "position": {
          "x": 2387.7050010327357,
          "y": 236.3213098237208
        },
        "timeout": 600,
        "componentCode": "python_coder/python_coder/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "python_coder/python_coder/example.json",
        "invalidErrors": []
      },
      {
        "id": "ba77b735-8902-4c04-beff-eafb6b86be57",
        "workflowId": "d9ca7a05-bc45-4a1e-ae70-726c659982dc",
        "name": "Text Input",
        "className": "TextInput",
        "description": "Allows the user to input a text (potentially with template variables) that can be used in other downstream components.\nInputs:\n  `Input` (str): The text to output.\nOutput (str): The inputted text.",
        "group": "Input",
        "inputs": [
          {
            "key": "Input",
            "dataType": "TEMPLATE",
            "value": "",
            "templateVariables": {},
            "componentId": "ba77b735-8902-4c04-beff-eafb6b86be57"
          }
        ],
        "output": {
          "dataType": "TEXT",
          "value": ":undef:"
        },
        "label": "TEXTINPUT-7",
        "configuration": {
          "force_run": false
        },
        "version": null,
        "isCustom": false,
        "isTerminal": false,
        "position": {
          "x": 1954.924991576393,
          "y": 473.4094889171954
        },
        "timeout": 600,
        "componentCode": "text_input/text_input/__init__.py",
        "componentCodeRequirements": [],
        "componentExamplePath": "text_input/text_input/example.json",
        "invalidErrors": []
      }
    ],
    "dependencies": [
      {
        "componentInputKey": "papers",
        "sourceLabel": "PYTHONCODER-2",
        "targetLabel": "PAPERDATABASEBUILDER-3",
        "templateVariableKey": null
      },
      {
        "componentInputKey": "loaded_database_json",
        "sourceLabel": "PYTHONCODER-1",
        "targetLabel": "PAPERDATABASEBUILDER-3",
        "templateVariableKey": null
      },
      {
        "componentInputKey": "Code",
        "sourceLabel": "PAPERDATABASEBUILDER-3",
        "targetLabel": "PYTHONCODER-4",
        "templateVariableKey": "Code.db_dict"
      },
      {
        "componentInputKey": "Documents Json",
        "sourceLabel": "PYTHONCODER-4",
        "targetLabel": "LLAMAINDEXINDEXING-5",
        "templateVariableKey": null
      },
      {
        "componentInputKey": "Code",
        "sourceLabel": "LLAMAINDEXINDEXING-5",
        "targetLabel": "PYTHONCODER-6",
        "templateVariableKey": "Code.index_data"
      },
      {
        "componentInputKey": "Code",
        "sourceLabel": "TEXTINPUT-7",
        "targetLabel": "PYTHONCODER-6",
        "templateVariableKey": "Code.index_json_path"
      },
      {
        "componentInputKey": "Code",
        "sourceLabel": "TEXTINPUT-0",
        "targetLabel": "PYTHONCODER-1",
        "templateVariableKey": "Code.db_path"
      }
    ],
    "timeout": 3600,
    "autoComponentSpacing": {
      "dx": 450.0,
      "dy": 350.0,
      "x0": 0.0,
      "y0": 0.0
    },
    "invalidErrors": []
}